package Interface;

import Networking.Client.ConnectionHandler;
import Console.ConsoleFrame;
import Networking.Requests.GetMatchList;
import Networking.Requests.GetPlayerStateList;
import Networking.Server.Match;
import Networking.Server.Player;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.SwingWorker;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
/**
 *
 * @author Dragos-Alexandru
 */
public class MultiplayerServerPanel extends javax.swing.JPanel {

    private final MainFrame rootFrame;
    private volatile List<Match> activeMatches;
    private int selected;
    
    /**
     * Creates new form MultiplayerServerBrowser
     * @param rootFrame
     */
    public MultiplayerServerPanel(MainFrame rootFrame) {
        
        this.rootFrame = rootFrame;
        
        initComponents();
        
        HelloMessage.setText("Hello "+Player.getInstance().getUsername());
        
        listAvailableMatches.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                selected = listAvailableMatches.getSelectedIndex();
                
                if (selected == -1) {
                    listAvailableMatches.setSelectedIndex(0);
                    selected = 0;
                }
                
                DefaultListModel<String> dlm = new DefaultListModel<>();
                
                if (!activeMatches.isEmpty()) {
                    Match selectedMatch = activeMatches.get(selected);
                    players.setText("Players "+selectedMatch.getNumberOfPlayers()+ "/" + selectedMatch.getMaxNumberOfPlayers());
               
                    for(String player:selectedMatch.getPlayerList())
                        dlm.addElement(player);
                }
                
                listPlayers.setModel(dlm);
            }
        });
        
        refreshButtonActionPerformed(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        joinMatchButton = new javax.swing.JButton();
        createMatchButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        scrollPlayers = new javax.swing.JScrollPane();
        listPlayers = new javax.swing.JList();
        scrollAvailableMatches = new javax.swing.JScrollPane();
        listAvailableMatches = new javax.swing.JList();
        players = new javax.swing.JLabel();
        matches = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        refreshButton = new javax.swing.JButton();
        HelloMessage = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(600, 400));
        setMinimumSize(new java.awt.Dimension(600, 400));

        joinMatchButton.setBackground(new java.awt.Color(153, 153, 255));
        joinMatchButton.setText("Join match");
        joinMatchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                joinMatchButtonActionPerformed(evt);
            }
        });

        createMatchButton.setBackground(new java.awt.Color(102, 255, 102));
        createMatchButton.setText("Create match");
        createMatchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createMatchButtonActionPerformed(evt);
            }
        });

        backButton.setBackground(new java.awt.Color(255, 255, 255));
        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        listPlayers.setMaximumSize(new java.awt.Dimension(40, 80));
        listPlayers.setMinimumSize(new java.awt.Dimension(40, 80));
        scrollPlayers.setViewportView(listPlayers);

        listAvailableMatches.setMaximumSize(new java.awt.Dimension(40, 80));
        listAvailableMatches.setMinimumSize(new java.awt.Dimension(40, 80));
        scrollAvailableMatches.setViewportView(listAvailableMatches);

        players.setText("Players");

        matches.setText("Matches");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Select server");

        refreshButton.setBackground(new java.awt.Color(255, 153, 51));
        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        HelloMessage.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        HelloMessage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        HelloMessage.setText("Hello Local");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollAvailableMatches, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                    .addComponent(matches))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(jLabel3)
                        .addGap(55, 55, 55))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(createMatchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(joinMatchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(HelloMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(36, 36, 36)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPlayers, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(players))
                .addGap(7, 7, 7))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                        .addComponent(joinMatchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(createMatchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(HelloMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(players)
                            .addComponent(matches))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(scrollPlayers, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                            .addComponent(scrollAvailableMatches))))
                .addContainerGap(46, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void joinMatchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_joinMatchButtonActionPerformed
        Match selectedMatch = activeMatches.get(selected);
        JoinWorker worker = new JoinWorker(selectedMatch);
        try {
            worker.execute();
            boolean success = worker.get();
            if(success){
                List<String> playerStateList =  
                        (List<String>)ConnectionHandler.getInstance().readFromMatch();
                rootFrame.changePanel(new MultiplayerMatchPanel(rootFrame, playerStateList));
            }
        } catch (ClassNotFoundException | IOException | InterruptedException | ExecutionException ex) {
            ConsoleFrame.showError("Failed to connect to match.");
        }
    }//GEN-LAST:event_joinMatchButtonActionPerformed

    private void createMatchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createMatchButtonActionPerformed
        rootFrame.changePanel(new MultiplayerCreateMatch(rootFrame));
    }//GEN-LAST:event_createMatchButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        rootFrame.changePanel(new MultiplayerChooserPanel(rootFrame));
    }//GEN-LAST:event_backButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        
        players.setText("Players");
        listPlayers.setModel(new DefaultListModel<>());
        
        RefreshWorker worker = new RefreshWorker();
        try {
            DefaultListModel<String> dlm = new DefaultListModel<>();
            worker.execute();
            activeMatches = worker.get();
            for(Match match: activeMatches)
                dlm.addElement(match.toListMatch());
            listAvailableMatches.setModel(dlm);
        } catch (InterruptedException | ExecutionException ex) {
            ConsoleFrame.sendMessage(this.getClass().getSimpleName(), "Failed to refresh match list");
            ConsoleFrame.showError("Failed to refresh match list");
        }
    }//GEN-LAST:event_refreshButtonActionPerformed

    private class JoinWorker extends SwingWorker<Boolean, Void>{

        Match selectedMatch;
        
        private JoinWorker(Match selectedMatch){
            this.selectedMatch = selectedMatch;
        }
        
        @Override
        protected Boolean doInBackground() throws Exception {
            ConnectionHandler.getInstance().connectToMatch(selectedMatch);
            return true;
        }
        
    }
    
    
    /**
     * This worker gets the match list from the master server
     */
    public class RefreshWorker extends SwingWorker<List<Match>, Void> {
        @Override
        protected List<Match> doInBackground() throws Exception {
            List<Match> matches = new LinkedList<>();
            try {
                matches = (List<Match>)ConnectionHandler.getInstance().readFromMasterServer(new GetMatchList());
            } catch (IOException | ClassNotFoundException ex) {
                Logger.getLogger(MultiplayerServerPanel.class.getName()).log(Level.SEVERE, null, ex);
                ConsoleFrame.showError("Lost connection to the master-server.");
                Player.getInstance().logOut();
                MainFrame.getInstance().changePanel(new MultiplayerChooserPanel(MainFrame.getInstance()));
            }
            return matches;
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel HelloMessage;
    private javax.swing.JButton backButton;
    private javax.swing.JButton createMatchButton;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton joinMatchButton;
    private javax.swing.JList listAvailableMatches;
    private javax.swing.JList listPlayers;
    private javax.swing.JLabel matches;
    private javax.swing.JLabel players;
    private javax.swing.JButton refreshButton;
    private javax.swing.JScrollPane scrollAvailableMatches;
    private javax.swing.JScrollPane scrollPlayers;
    // End of variables declaration//GEN-END:variables
}
